{"mappings":"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","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport interface ExecuteScriptPayload {\n  /**\n   * Source code to be executed.\n   * @example console.log('Hello World!')\n   */\n  source: string;\n\n  /** Object with key value pairs that will be made available as properties on `globalThis` within the script context. */\n  globals?: object;\n\n  /**\n   * Timeout in milliseconds after which execution is terminated and an error is returned.\n   * @example 2000\n   */\n  timeout?: number;\n\n  /** Additional scripts to be evaluated before the main source code runs. Can be used to customize the environment. */\n  layers?: { name: string; source: string }[];\n\n  /** Credentials to be used in outbound `fetch` requests made to other domains. */\n  fetchCredentials?: { domain: string; httpsOnly?: boolean; headerName?: string; headerValue?: string }[];\n}\n\nexport interface ExecuteScriptData {\n  status?: \"ok\" | \"failed\";\n\n  /** Value returned from the executed source code. Only present if `status` is `\"ok\"`. */\n  value?: string;\n\n  /** Exception thrown during execution. Only present if `status` is `\"failed\"`. */\n  exception?: { message?: string; stack?: string[] };\n\n  /** Duration (real time) of the execution (including layers) measured in milliseconds. */\n  duration?: number;\n\n  /** Log lines produced by the script or other layers via `console.log`. */\n  logs?: string[];\n}\n\nexport namespace Core {\n  /**\n   * No description\n   * @tags core\n   * @name ExecuteScript\n   * @summary Execute Code Snippet\n   * @request POST:/execute\n   * @secure\n   */\n  export namespace ExecuteScript {\n    export type RequestParams = {};\n    export type RequestQuery = {};\n    export type RequestBody = ExecuteScriptPayload;\n    export type RequestHeaders = {};\n    export type ResponseBody = ExecuteScriptData;\n  }\n}\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, HeadersDefaults, ResponseType } from \"axios\";\n\nexport type QueryParamsType = Record<string | number, any>;\n\nexport interface FullRequestParams extends Omit<AxiosRequestConfig, \"data\" | \"params\" | \"url\" | \"responseType\"> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseType;\n  /** request body */\n  body?: unknown;\n}\n\nexport type RequestParams = Omit<FullRequestParams, \"body\" | \"method\" | \"query\" | \"path\">;\n\nexport interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, \"data\" | \"cancelToken\"> {\n  securityWorker?: (\n    securityData: SecurityDataType | null,\n  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;\n  secure?: boolean;\n  format?: ResponseType;\n}\n\nexport enum ContentType {\n  Json = \"application/json\",\n  FormData = \"multipart/form-data\",\n  UrlEncoded = \"application/x-www-form-urlencoded\",\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public instance: AxiosInstance;\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>[\"securityWorker\"];\n  private secure?: boolean;\n  private format?: ResponseType;\n\n  constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {\n    this.instance = axios.create({ ...axiosConfig, baseURL: axiosConfig.baseURL || \"https://api.scriptable.run/v1\" });\n    this.secure = secure;\n    this.format = format;\n    this.securityWorker = securityWorker;\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {\n    const method = params1.method || (params2 && params2.method);\n\n    return {\n      ...this.instance.defaults,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected stringifyFormItem(formItem: unknown) {\n    if (typeof formItem === \"object\" && formItem !== null) {\n      return JSON.stringify(formItem);\n    } else {\n      return `${formItem}`;\n    }\n  }\n\n  protected createFormData(input: Record<string, unknown>): FormData {\n    return Object.keys(input || {}).reduce((formData, key) => {\n      const property = input[key];\n      const propertyContent: Iterable<any> = property instanceof Array ? property : [property];\n\n      for (const formItem of propertyContent) {\n        const isFileType = formItem instanceof Blob || formItem instanceof File;\n        formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));\n      }\n\n      return formData;\n    }, new FormData());\n    return Object.keys(input || {}).reduce((formData, key) => {\n      const property = input[key];\n      formData.append(\n        key,\n        property instanceof Blob\n          ? property\n          : typeof property === \"object\" && property !== null\n          ? JSON.stringify(property)\n          : `${property}`,\n      );\n      return formData;\n    }, new FormData());\n  }\n\n  public request = async <T = any, _E = any>({\n    secure,\n    path,\n    type,\n    query,\n    format,\n    body,\n    ...params\n  }: FullRequestParams): Promise<AxiosResponse<T>> => {\n    const secureParams =\n      ((typeof secure === \"boolean\" ? secure : this.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const responseFormat = format || this.format || undefined;\n\n    if (type === ContentType.FormData && body && body !== null && typeof body === \"object\") {\n      body = this.createFormData(body as Record<string, unknown>);\n    }\n\n    return this.instance.request({\n      ...requestParams,\n      headers: {\n        ...(requestParams.headers || {}),\n        ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n      },\n      params: query,\n      responseType: responseFormat,\n      data: body,\n      url: path,\n    });\n  };\n}\n\n/**\n * @title Scriptable API\n * @version 1.0.0\n * @baseUrl https://api.scriptable.run/v1\n */\nexport class Scriptable<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags core\n   * @name ExecuteScript\n   * @summary Execute Code Snippet\n   * @request POST:/execute\n   * @secure\n   */\n  executeScript = (data: ExecuteScriptPayload, params: RequestParams = {}) =>\n    this.request<ExecuteScriptData, any>({\n      path: `/execute`,\n      method: \"POST\",\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      ...params,\n    });\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}