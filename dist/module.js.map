{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport namespace Execute {\n  /**\n   * No description\n   * @tags core\n   * @name Execute\n   * @summary Execute Code Snippet\n   * @request POST:/execute\n   */\n  export namespace Execute {\n    export type RequestParams = {};\n    export type RequestQuery = {};\n    export type RequestBody = {\n      source: string;\n      globals?: object;\n      timeout?: number;\n      layers?: { name: string; source: string }[];\n      fetchCredentials?: { domain: string; httpsOnly?: boolean; headerName?: string; headerValue?: string }[];\n    };\n    export type RequestHeaders = {};\n    export type ResponseBody = {\n      status?: \"ok\" | \"failed\";\n      value?: string;\n      exception?: { message?: string; stack?: string[] };\n      duration?: number;\n      logs?: string[];\n    };\n  }\n}\n\nexport type QueryParamsType = Record<string | number, any>;\nexport type ResponseFormat = keyof Omit<Body, \"body\" | \"bodyUsed\">;\n\nexport interface FullRequestParams extends Omit<RequestInit, \"body\"> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat;\n  /** request body */\n  body?: unknown;\n  /** base url */\n  baseUrl?: string;\n  /** request cancellation token */\n  cancelToken?: CancelToken;\n}\n\nexport type RequestParams = Omit<FullRequestParams, \"body\" | \"method\" | \"query\" | \"path\">;\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string;\n  baseApiParams?: Omit<RequestParams, \"baseUrl\" | \"cancelToken\" | \"signal\">;\n  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;\n  customFetch?: typeof fetch;\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {\n  data: D;\n  error: E;\n}\n\ntype CancelToken = Symbol | string | number;\n\nexport enum ContentType {\n  Json = \"application/json\",\n  FormData = \"multipart/form-data\",\n  UrlEncoded = \"application/x-www-form-urlencoded\",\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = \"https://api.scriptable.run/v1\";\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>[\"securityWorker\"];\n  private abortControllers = new Map<CancelToken, AbortController>();\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);\n\n  private baseApiParams: RequestParams = {\n    credentials: \"same-origin\",\n    headers: {},\n    redirect: \"follow\",\n    referrerPolicy: \"no-referrer\",\n  };\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig);\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key);\n    return `${encodedKey}=${encodeURIComponent(typeof value === \"number\" ? value : `${value}`)}`;\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key]);\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key];\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join(\"&\");\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n    return keys\n      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))\n      .join(\"&\");\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : \"\";\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) =>\n      input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key];\n        formData.append(\n          key,\n          property instanceof Blob\n            ? property\n            : typeof property === \"object\" && property !== null\n            ? JSON.stringify(property)\n            : `${property}`,\n        );\n        return formData;\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),\n  };\n\n  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken);\n      if (abortController) {\n        return abortController.signal;\n      }\n      return void 0;\n    }\n\n    const abortController = new AbortController();\n    this.abortControllers.set(cancelToken, abortController);\n    return abortController.signal;\n  };\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken);\n\n    if (abortController) {\n      abortController.abort();\n      this.abortControllers.delete(cancelToken);\n    }\n  };\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<HttpResponse<T, E>> => {\n    const secureParams =\n      ((typeof secure === \"boolean\" ? secure : this.baseApiParams.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const queryString = query && this.toQueryString(query);\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n    const responseFormat = format || requestParams.format;\n\n    return this.customFetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n      ...requestParams,\n      headers: {\n        ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n        ...(requestParams.headers || {}),\n      },\n      signal: cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal,\n      body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body),\n    }).then(async (response) => {\n      const r = response as HttpResponse<T, E>;\n      r.data = null as unknown as T;\n      r.error = null as unknown as E;\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then((data) => {\n              if (r.ok) {\n                r.data = data;\n              } else {\n                r.error = data;\n              }\n              return r;\n            })\n            .catch((e) => {\n              r.error = e;\n              return r;\n            });\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken);\n      }\n\n      if (!response.ok) throw data;\n      return data;\n    });\n  };\n}\n\n/**\n * @title Scriptable API\n * @version 1.0.0\n * @baseUrl https://api.scriptable.run/v1\n */\nexport class Scriptable<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {\n  execute = {\n    /**\n     * No description\n     *\n     * @tags core\n     * @name Execute\n     * @summary Execute Code Snippet\n     * @request POST:/execute\n     */\n    execute: (\n      data: {\n        source: string;\n        globals?: object;\n        timeout?: number;\n        layers?: { name: string; source: string }[];\n        fetchCredentials?: { domain: string; httpsOnly?: boolean; headerName?: string; headerValue?: string }[];\n      },\n      params: RequestParams = {},\n    ) =>\n      this.request<\n        {\n          status?: \"ok\" | \"failed\";\n          value?: string;\n          exception?: { message?: string; stack?: string[] };\n          duration?: number;\n          logs?: string[];\n        },\n        any\n      >({\n        path: `/execute`,\n        method: \"POST\",\n        body: data,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}