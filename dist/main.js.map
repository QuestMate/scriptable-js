{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport interface ExecuteScriptPayload {\n  /**\n   * Source code to be executed.\n   * @example console.log('Hello World!')\n   */\n  source: string;\n\n  /** Object with key value pairs that will be made available as properties on `globalThis` within the script context. */\n  globals?: object;\n\n  /**\n   * Timeout in milliseconds after which execution is terminated and an error is returned.\n   * @example 2000\n   */\n  timeout?: number;\n\n  /** Additional scripts to be evaluated before the main source code runs. Can be used to customize the environment. */\n  layers?: { name: string; source: string }[];\n\n  /** Credentials to be used in outbound `fetch` requests made to other domains. */\n  fetchCredentials?: { domain: string; httpsOnly?: boolean; headerName?: string; headerValue?: string }[];\n}\n\nexport interface ExecuteScriptData {\n  status?: \"ok\" | \"failed\";\n\n  /** Value returned from the executed source code. Only present if `status` is `\"ok\"`. */\n  value?: string;\n\n  /** Exception thrown during execution. Only present if `status` is `\"failed\"`. */\n  exception?: { message?: string; stack?: string[] };\n\n  /** Duration (real time) of the execution (including layers) measured in milliseconds. */\n  duration?: number;\n\n  /** Log lines produced by the script or other layers via `console.log`. */\n  logs?: string[];\n}\n\nexport namespace Core {\n  /**\n   * No description\n   * @tags core\n   * @name ExecuteScript\n   * @summary Execute Code Snippet\n   * @request POST:/execute\n   * @secure\n   */\n  export namespace ExecuteScript {\n    export type RequestParams = {};\n    export type RequestQuery = {};\n    export type RequestBody = ExecuteScriptPayload;\n    export type RequestHeaders = {};\n    export type ResponseBody = ExecuteScriptData;\n  }\n}\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, HeadersDefaults, ResponseType } from \"axios\";\n\nexport type QueryParamsType = Record<string | number, any>;\n\nexport interface FullRequestParams extends Omit<AxiosRequestConfig, \"data\" | \"params\" | \"url\" | \"responseType\"> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseType;\n  /** request body */\n  body?: unknown;\n}\n\nexport type RequestParams = Omit<FullRequestParams, \"body\" | \"method\" | \"query\" | \"path\">;\n\nexport interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, \"data\" | \"cancelToken\"> {\n  securityWorker?: (\n    securityData: SecurityDataType | null,\n  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;\n  secure?: boolean;\n  format?: ResponseType;\n}\n\nexport enum ContentType {\n  Json = \"application/json\",\n  FormData = \"multipart/form-data\",\n  UrlEncoded = \"application/x-www-form-urlencoded\",\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public instance: AxiosInstance;\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>[\"securityWorker\"];\n  private secure?: boolean;\n  private format?: ResponseType;\n\n  constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {\n    this.instance = axios.create({ ...axiosConfig, baseURL: axiosConfig.baseURL || \"https://api.scriptable.run/v1\" });\n    this.secure = secure;\n    this.format = format;\n    this.securityWorker = securityWorker;\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {\n    const method = params1.method || (params2 && params2.method);\n\n    console.log('this.instance.defaults: ', this.instance.defaults)\n    console.log('((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}): ', ((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}))\n\n    return {\n      ...this.instance.defaults,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected stringifyFormItem(formItem: unknown) {\n    if (typeof formItem === \"object\" && formItem !== null) {\n      return JSON.stringify(formItem);\n    } else {\n      return `${formItem}`;\n    }\n  }\n\n  protected createFormData(input: Record<string, unknown>): FormData {\n    return Object.keys(input || {}).reduce((formData, key) => {\n      const property = input[key];\n      const propertyContent: Iterable<any> = property instanceof Array ? property : [property];\n\n      for (const formItem of propertyContent) {\n        const isFileType = formItem instanceof Blob || formItem instanceof File;\n        formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));\n      }\n\n      return formData;\n    }, new FormData());\n    return Object.keys(input || {}).reduce((formData, key) => {\n      const property = input[key];\n      formData.append(\n        key,\n        property instanceof Blob\n          ? property\n          : typeof property === \"object\" && property !== null\n          ? JSON.stringify(property)\n          : `${property}`,\n      );\n      return formData;\n    }, new FormData());\n  }\n\n  public request = async <T = any, _E = any>({\n    secure,\n    path,\n    type,\n    query,\n    format,\n    body,\n    ...params\n  }: FullRequestParams): Promise<AxiosResponse<T>> => {\n    const secureParams =\n      ((typeof secure === \"boolean\" ? secure : this.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const responseFormat = format || this.format || undefined;\n\n    if (type === ContentType.FormData && body && body !== null && typeof body === \"object\") {\n      body = this.createFormData(body as Record<string, unknown>);\n    }\n\n    let headers = {\n      ...(requestParams.headers || {}),\n      ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n    };\n    console.log('(requestParams.headers || {}):', (requestParams.headers || {}))\n\n    console.log('Final Headers: ', headers)\n    return this.instance.request({\n      ...requestParams,\n      headers: headers,\n      params: query,\n      responseType: responseFormat,\n      data: body,\n      url: path,\n    });\n  };\n}\n\n/**\n * @title Scriptable API\n * @version 1.0.0\n * @baseUrl https://api.scriptable.run/v1\n */\nexport class Scriptable<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags core\n   * @name ExecuteScript\n   * @summary Execute Code Snippet\n   * @request POST:/execute\n   * @secure\n   */\n  executeScript = (data: ExecuteScriptPayload, params: RequestParams = {}) =>\n    this.request<ExecuteScriptData, any>({\n      path: `/execute`,\n      method: \"POST\",\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      ...params,\n    });\n}\n"],"names":[],"version":3,"file":"main.js.map"}